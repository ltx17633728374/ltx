监控软件:
	部署:yum -y install  audit
	 systemctl start auditd  
	cat /etc/audit/auditd.conf    #查看配置文件中日志文件的位置

	配置审计规则:
		 auditctl  -s    #查询状态
				-l   #查看规则
				-D   #删除所有规则
	#语法格式：auditctl  -w  path  -p  permission  -k  key_name
	# path为需要审计的文件或目录
	# 权限可以是r,w,x,a(文件或目录的属性发生变化)
	# Key_name为可选项，方便识别哪些规则生成特定的日志项

		 auditctl  -w  /etc/passwd  -p wa  -k  passwd_change
			#passwd的写入,属性修改的操作会被记录
	
	tailf  /var/log/audit/audit.log     #在另外终端更改监控的目录,查看实时的情况
		type=SYSCALL msg=audit(1517557590.644:229228): arch=c000003e 
		syscall=2 success=yes exit=3 
		a0=7fff71721839 a1=0 a2=1fffffffffff0000 a3=7fff717204c0 
		items=1 ppid=7654 pid=7808 auid=0 uid=0 gid=0 euid=0 suid=0 
		fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=3 comm="cat" 
		exe="/usr/bin/cat" 
		subj=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 key="sshd_config"
		.. ..
		#内容分析
		# type为类型
		# msg为(time_stamp:ID)，时间是date +%s（1970-1-1至今的秒数）
		# arch=c000003e，代表x86_64（16进制）
		# success=yes/no，事件是否成功
		# a0-a3是程序调用时前4个参数，16进制编码了
		# ppid父进程ID，如bash，pid进程ID，如cat命令
		# auid是审核用户的id，su - test, 依然可以追踪su前的账户
		# uid，gid用户与组
		# tty:从哪个终端执行的命令
		# comm="cat"            用户在命令行执行的指令
		# exe="/bin/cat"        实际程序的路径
		# key="sshd_config"    管理员定义的策略关键字key
		# type=CWD        用来记录当前工作目录
		# cwd="/home/username"
		# type=PATH
		# ouid(owner's user id）    对象所有者id
		# guid(owner's groupid）    对象所有者id
	
		ausearch -k sshd_config -i     #根据key搜索日志,-i选项表示以交互式方式操作

优化nginx:
	安装时去除不要的模块:
		--without-http_autoindex_module \          #禁用自动索引文件目录模块
		>--without-http_ssi_module
				
	vim /usr/local/nginx/conf/nginx.conf
		...
		htpp{
			server_tokens off;     #不显示nginx版本号
			...
			}
		
	重装nginx之前,更改源码,可以自定义显示:
		vim +48 /root/nginx-1.12/src/http/ngx_http_header_filter_module.c
		#该文件修改前效果如下：
		static u_char ngx_http_server_string[] = "Server: nginx" CRLF;
		static u_char ngx_http_server_full_string[] = "Server: " NGINX_VER CRLF;
		static u_char ngx_http_server_build_string[] = "Server: " NGINX_VER_BUILD CRLF;
		#下面是我们修改后的效果：
		static u_char ngx_http_server_string[] = "Server: Jacob" CRLF;
		static u_char ngx_http_server_full_string[] = "Server: Jacob" CRLF;
		static u_char ngx_http_server_build_string[] = "Server: Jacob" CRLF;
		#修改完成后，再去编译安装Nignx，版本信息将不再显示为Nginx，而是Jacob
	
	限制并发量:
		vim /usr/local/nginx/conf/nginx.conf
		...
		http{
		...
		limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
			server {
        		listen 80;
        		server_name localhost;
        		limit_req zone=one burst=5;
            		}
		}
			
		#limit_req_zone语法格式如下：
		#limit_req_zone key zone=name:size rate=rate;
		#上面案例中是将客户端IP信息存储名称为one的共享内存，内存空间为10M
		#1M可以存储8千个IP信息，10M可以存储8万个主机连接的状态，容量可以根据需要任意调整
		#每秒中仅接受1个请求，多余的放入漏斗
		#漏斗超过5个则报错

	拒绝非法请求:
		GET 请求指定页面信息,并返回实体主体
		HEAD 类似与get请求,只获取包头
		POST 向指定服务器提交数据进行处理请求
		DELETE 请求服务器删除指定的页面
		PUT 向服务器特定位置上传资料
	curl -i -X GET  http://192.168.4.5    #按GET请求访问
		#curl命令选项说明：
		#-i选项：访问服务器页面时，显示HTTP的头部信息
		#-X选项：指定请求服务器的方法
	vim /usr/local/nginx/conf/nginx.conf
		http{
       		server {
                 listen 80;
			#这里，!符号表示对正则取反，~符号是正则匹配符号
			#如果用户使用非GET或POST方法访问网站，则retrun返回444的错误信息
              if ($request_method !~ ^(GET|POST)$ ) {
                     return 444;
              	 }    
        	}
		}
	
	防止buffer溢出:
		vim /usr/local/nginx/conf/nginx.conf
		http{
		client_body_buffer_size  1K;
		client_header_buffer_size 1k;
		client_max_body_size 1k;
		large_client_header_buffers 2 1k;
		 … …
		}
	
数据库优化和安全:
	mysql_secure_installation      #数据自带的脚本,执行之后可以初始化
     密码问题:
	cat /root/.bash_history     #在命令行修改密码时,会被记录
	cat /root/.mysql_history    #在数据库内修改密码时,会被记录
      抓包数据库的数据:
	tcpdump -w log -i any src or dst port 3306   #抓取端口3306的包,存到日志文件中
      tcpdump -A -r log              #使用tcpdump查看数据包
      #为避免被抓包,可以使用ssh远程连接服务器后本地登录

TOMCAT:
	vim /usr/local/tomcat/conf/server.xml
	<Connector port="8080" protocol="HTTP/1.1"
	connectionTimeout="20000"  redirectPort="8443" server="jacob" />
					#版本信息被改为jacob
	创建普通用户,让它启动tomcat
		useradd tomcat
		chown -R tomcat:tomcat /usr/local/tomcat/
		su -c /usr/local/tomcat/bin/startup.sh tomcat

diff和patch工具打补丁:
	diff  test1.sh test2.sh       #查看文件差异
	    diff常用选项:
		-u	输出统一内容的头部信息（打补丁使用），计算机知道是哪个文件需要修改
		-r	递归对比目录中的所有资源（可以对比目录）
		-a	所有文件视为文本（包括二进制程序）
		-N	无文件视为空文件（空文件怎么变成第二个文件）
		-N选项备注说明：
		A目录下没有txt文件，B目录下有txt文件
		diff比较两个目录时，默认会提示txt仅在B目录有（无法对比差异，修复文件）
		diff比较时使用N选项，则diff会拿B下的txt与A下的空文件对比，补丁信息会明确说明如何从空文件修改后变成txt文件，打补丁即可成功！

	diff -u test1.sh test2.sh > test.patch     #根据文件的不同生成补丁
	yum -y install patch                       #装包
	patch -p0 < test.patch                     #打补丁
		(-p0表示路径不变,-p1表示路径多一层)
	patch -RE < test.patch                     #还原旧版本

	diff -Nuar dir1/ dir2/ > dir.patch         #目录中很多出不一样时,制作补丁
	patch -p0 < dir.patch                     #打补丁(在dir1,dir2的上一级目录)










































