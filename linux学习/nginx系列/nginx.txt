安装依赖包:
	yum -y install gcc pcre-devel openssl-devel

源码安装: ./configure   \
	> --prefix=/usr/local/nginx   \                //指定安装路径
	> --user=nginx   \                            //指定用户
	> --group=nginx  \                            //指定组
	> --with-http_ssl_module                        //开启SSL加密功能
默认路径:
	/usr/local/nginx/sbin/nginx
nginx服务:
	ln -s /usr/local/nginx/sbin/nginx /sbin/nginx   ##做个软连接
	nginx                     #启动
	nginx -s stop             #关闭
	nginx -s reload           #重新加载配置
	nginx -V                  #查看版本
ngnix安全:
	useradd -s /sbin/nologin nginx   #让启动nginx的用户足够安全
nginx端口被占用:
	netstat 查看端口(或者ss命令)
		-a显示所有端口信息
		-n以数字格式显示端口号
		-t显示tcp链接
		-u显示udp链接
		-l显示服务正在监听的端口信息
		-p显示监听端口程序
nginx升级:
	解压升级包 tar -xf nginx-1.12.2.tar.gz
	在解压目录内设置安装选项:./configure   \
			> --prefix=/usr/local/nginx   \ 
			> --user=nginx   \ 
			> --group=nginx  \ 
			> --with-http_ssl_module
	编译二进制文件:make
	编译的二进制文件在解压目录下的objs/nginx
	将新的程序替换旧的程序:cp objs/nginx  /usr/local/nginx/sbin/
	关闭nginx 再重新启动
	nginx -V 检查版本号
登录验证:
	vim /usr/local/nginx/conf/nginx.conf
	...

	server {
        listen       80;                     #端口
        server_name  localhost;		#域名	
        auth_basic "Input Password:";                        #认证提示符
        auth_basic_user_file "/usr/local/nginx/pass";        #认证密码文件
        location / {
            root   html;				#网页文件根目录
            index  index.html index.htm;	#默认网页文件
        	}
  	}
	改完配置文件之后创建密码文件:
	yum -y install httpd-tools
	htpasswd -c /usr/local/nginx/pass tom   #创建tom及输入密码
	htpasswd /usr/local/nginx/pass jerry  #在源密码文件中添加Jerry及输入密码
虚拟主机:
	把第一个serevr的域名改为server_name www.a.com
	取消第二个server语句前的所有#,让第二个server的配置生效
	改第二个server的域名 server_name www.b.com
	为第二个server指定网站根路径 root www(自己创建的)
客户端:
	在/etc/hosts文件里添加进dns的域名和地址
	192.168.4.5 www.a.com www.b.com
ssl加密:
	证书和私钥:cd /usr/local/nginx/conf
	openssl genrsa > cert.key		#私钥
	openssl req -new -x509 -key cert.key > cert.pem  #证书
	设置第三个server的加密:vim /usr/local/nginx/conf/nginx.conf
	......
	server {
        listen       443 ssl;                #端口号
        server_name            www.c.com;    #第三个server的域名
        ssl_certificate      cert.pem;         #这里是证书文件
        ssl_certificate_key  cert.key;         #这里是私钥文件
        ssl_session_cache    shared:SSL:1m;    
        ssl_session_timeout  5m;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;
        location / {
            root   html;
            index  index.html index.htm;
        	}
   	}
部署LNMP环境:
	装包:mariadb mariadb-server mariadb-devel php php-fpm php-mysql
	起服务: systemctl start  mariadb 
		 systemctl start php-fpm
	配置文件:vim /etc/php-fpm.d/www/conf
	[www]
	listen = 127.0.0.1:9000            //PHP端口号
	pm.max_children = 32                //最大进程数量
	pm.start_servers = 15                //最小进程数量
	pm.min_spare_servers = 5            //最少需要几个空闲着的进程
	pm.max_spare_servers = 32            //最多允许几个进程处于空闲状态

	nginx的配置文件:
	vim /usr/local/nginx/conf/nginx.conf
	location / {
            root   html;                                 #网页文件地址
            index  index.php  index.html   index.htm;   #首页已经设置index.php
       	 	}
 	location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;    #将请求转发给本机9000端口，PHP解释器
            fastcgi_index  index.php;
            #fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;   #此行已经被注释掉
            include        fastcgi.conf;
       		}
自动监控数据库的动态:
	mysql.php
<?php
$mysqli = new mysqli('localhost','root','密码','mysql');
//注意：root为mysql账户名称，密码需要修改为实际mysql密码，无密码则留空即可
if (mysqli_connect_errno()){
    die('Unable to connect!'). mysqli_connect_error();
}
$sql = "select * from user";
$result = $mysqli->query($sql);
while($row = $result->fetch_array()){
    printf("Host:%s",$row[0]);
    printf("</br>");
    printf("Name:%s",$row[1]);
    printf("</br>");
}
?>

重定向地址:
	vim /usr/local/nginx/conf/nginx.conf
	在server中改变配置:
		在index index.html index.html index.html;一行下面添加
		rewrite /a.html  /b.html;  #跳转a到b
		或者添加 rewrite ^/ http://www.tmooc.cn/;  #访问网页时跳转www.tmooc.cn
			rewrite ^/(.*) http://www.tmooc.cn/$1; #跳转时候子目录一并跳转
	日志文件目录:/usr/local//usr/local/nginx/logs/
	内置变量$remote_addr - $remote_user [$time_local]
		    用户ip         用户名字         时间
		$request $status $body_bytes_sent "$http_referer
		   请求         状态       字节长度           默认为-
		"$http_user_agent" "$http_x_forwarded_for"
                      客户端的信息            
     地址重写选项:
	last 不在读其他rewrite
	break 终止语句
	redirect 临时重定向
	permanment 永久重定向
部署后端服务器:
    改配置:vim /usr/local/nginx/conf/nginx.conf
	http {
	....
	upstream webserver {
		server 192.168.2.100:80;  #服务器的集群,不做修改,客户端访问时轮询访问
		server 192.168.2.200:80;
		}
	...
	server { 
		listen 80;                 #监听端口
		server_name localhost;            
		location / {           
		proxy_pass http://webserver; #当客户访问80端口时转到服务器集群处理
		}
	}
        
    对服务器集群进行控制:vim /usr/local/nginx/conf/nginx.conf
	http {
	....
	upstream webserver {
		ip_hash;  #相同客户端访问的服务器是相同的
		server 192.168.2.100 weight=1 max_fails=2 fail_timeout=10;
			#优先级设置为1,失败次数为2次,间隔为10秒
		server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;		
			#优先级设置为2,失败次数为两次,间隔为10秒
		server 192.168.2.101 down; #宣布此服务器已经失效
                }
	server {
		listen 80;
		server_name localhost;
		localtion / {
		proxy_pass http://webserver; 
		}
	}	

TCP/UDP的调度:
	重装nginx,安装stream模块
	./configure \
	> --with-http_ssl_module               #开启SSL加密功能
	> --with-stream                        #开启4层反向代理功能
	改配置:vim /usr/local/nginx/conf/nginx.conf
	stream {
		upstream sshs {
			server 192.168.2.100:22;  #服务器集群
			server 192.168.2.200:22;
			}
		server {
			listen 54321;            #监听的端口,远程管理时加上-p 54321 即可		
			proxy_connect_timeout 1s;
			proxy_timeout 3s;
			proxy_pass sshs;
			}
	}

Nginx的优化问题:
	自定义报错:vim /usr/local/nginx/conf/nginx.conf
		找到 error_page 404 /404.html;然后取消注释(404.html需要自己创建)
		找到 charset koi8-r; 然后把koi8-r改成万国码utf-8
	查看服务器状态:
		重装nginx 装上--with-http_ssl_module
				--with-http_stub_status_module
				--with-stream
		配置文件:location /status {
					stub_status on;
					#allow IP地址
					#deny IP地址
				}
		访问时可以看到服务器动态 curl http://192.168.4.5/status			
			Active connections: 1
     			server accepts handled requests
  			10 10 3 
			Reading: 0 Writing: 1 Waiting: 0
		
		Active connections：当前活动的连接数量。
		Accepts：已经接受客户端的连接总数量。
		Handled：已经处理客户端的连接总数量。
		（一般与accepts一致，除非服务器限制了连接数量）。
		Requests：客户端发送的请求数量。
		Reading：当前服务器正在读取客户端请求头的数量。
		Writing：当前服务器正在写响应信息的数量。
		Waiting：当前多少客户端在等待服务器的响应。
           状态码
		200正常
		301永久重定向
		302临时重定向
		401用户名或者密码错误
		403禁止访问
		404文件不存在
		414请求url头部过长
		500服务器内部错误
		502 Bad Gateway

	优化Nginx的并发量:
		改配置:vim /usr/local/nginx/conf/nginx.conf
		....
		worker_processes 2;   #进程数量,改为和cpu核心数量一致
		events {
		worker_connections 20000;   #最大并发连接数量
		use epoll;
		}
		....
		ulimit -a #查看所有属性
				
 		ulimit -Hn 100000 #设置硬限制

		ulimit -Sn 100000 #设置软限制
		vim /etc/security/limits.conf
		....
		* soft nofile 20000
		* hard nofile 20000
	ab -n 2000 -c 2000 http://192.168.4.5/     #可以进行压力测试
	优化Nginx数据包头缓存:
		vim /usr/local/nginx/conf/nginx.conf
		...
		http{
		client_header_buffer_size 1K;     #默认请求包头信息的缓存
		large_client_header_buffers 4 4k;  #最大请求包头信息缓存个数和数量
		....
		}
	定义缓存:
		vim /usr/local/nginx/conf/nginx.conf
		server {
		...
		location ~* \. (jpg|jpeg|gif|png|css|js|ico|xml)$ {
		expries	30d;
		}
	日志切割:
		mv access.log access2.log
		kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)
	页面压缩:
		http {
		...		
		gzip on;        #打开压缩
		gzip_min_length 1000;  #小文件不压缩
		gzip_comp_level 4;     #压缩比率
		gzip_types text/plain text;   #压缩类型 参考mime.types
		...
		}
	内存缓存:
		http {
		open_file_cache max=2000  inactive=20s;  #最大缓存2000个,关闭20s内无缓存的文件句柄
        	open_file_cache_valid    60s;   #文件句柄有效时间60s
       	open_file_cache_min_uses 5;     #访问次数5次才缓存
        	open_file_cache_errors   off;   #关闭报错
		}
memcached服务:
	yum -y install memcached
	systemctl start memcached
	systemctl enable memcached
	yum -y install telnet   #测试服务器的增删改查
	add myname 0 180 10 #新建变量
	set myname 0 180 10 #更改变量
	replace myname 0 180 10 #替换变量
	get myname #读取变量
	addend myname 0 180 10 #向变量中追加数据
	delete myname #删除变量
	stats #查看状态
	flush_all 清空所有

LNMP+memcached:
	部署nginx环境,数据库,php
	添加测试网页:
		vim /usr/local/nginx/html/test.php
		<?php
		$memcache=new Memcache;                //创建memcache对象
		$memcache->connect('localhost',11211) or die ('could not connect!!');
		$memcache->set('key','test');             //定义变量
		$get_values=$memcache->get('key');        //获取变量值
		echo $get_values;
		?>
用php测试本地session:(session目录:/var/lib/php/session/)
	部署轮询可以轮询的服务器集群
	tar -xf php-memcached-demo.tar.gz
	cd php-memcached-demo
	cp -a * /usr/local/nginx/html
	修改两个服务的两个界面的颜色index.php home.php <body bgcolor=bule>

session共享:用户登录一次后不用再次登录
	yum -y install memcached php-pecl-memcache
	vim  /etc/php-fpm.d/www.conf  
	到达文件最后两行
	php_value[session.save_handler] = memcache
	php_value[session.save_path] = "tcp://192.168.2.5:11211"
	把session信息存在memcached的服务器上,实现session共享





















		










