数据备份:
    物理:
	cp -r /var/lib/mysql /root/mysqld.bak   #备份mysql数据
	scp -r /root/mysqld.bak 192.168.4.51:/root/  #把备份文件穿到其他主机
	rm -rf /var/lib/mysql
        在备份的主机操作:
	cp -r /root/mysqld.bak /var/lib/mysql   #把备份的文件拷贝进目录
	chown -R mysql:mysql /var/lib/mysql    #给文件加权限
	systemctl restart mysql      #重启MySQL服务
	mysql -uroot -p1111
	
    逻辑备份:
	完全备份及恢复(备份及恢复时要锁表)
	    命令行操作:		
		mysqldump -uroot -p2222 -A > /mydata/bei.sql
		#备份所有
		mysqldump -uroot -p2222 gamedb t3 > /mydata/gamet3.sql
		#备份gamedb下的t3表
		mysqldump -uroot-p2222 -B gamedb db2 > /mydata/gamedb2.sql
		备份gamedb,db2两个库
		mysql -uroot -p2222 gamedb < /mydata/gamet3.sql
		#恢复数据,前提是gamedb的库必须存在 
	增量备份及恢复:
	   binglog的使用:
		statement:只记录命令
		row:只记录修改的内容
		mixed:记录命令和修改内容
	    show variables like "binlog_format"; #查看当前日志记录格式
	   vim /etc/my.cnf   #修改配置,让日志启动
		[mysqld]
		#log_bin=/logdir/plj    
		#指定日志的名称和位置,不指定时在默认的目录下面/var/lib/mysql		
		lgo_bin
		server_id=50
		binlog_format="mixed"
		#chown mysql /logdir    #如果改了默认存放位置,就需要加权限	
	   mysqlbinlog /logdir/plj.00001    #查看日志文件内容 
		数据库日志刷新即为新建:
			systemctl restart mysqld
			flush logs  #登录后操作
			mysql -uroot -p2222 -e "flush logs"
			mysqldump --flush logs
	日志的使用:
		mysqlbinlog [选项] binlog日志文件名 | mysql -u root -p2222
		选项
		 --start-datetime="yyyy-mm-dd hh:mm:ss"   #开始时间
		 --start-datetime="yyyy-mm-dd hh:mm:ss"   #结束时间
		 --start-position=数字    #起始偏移值
		 --stop-position=数字     #结束偏移值
		可以根据偏移值或者时间来恢复数据库的内容,先完全备份恢复之后才能做日志恢复
	日志删除:
		purge master logs to "日志文件名";   #删除单个日志
		reset master;     #删除所有日志,重建新日志
工具备份:
	yum -y install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm
	yum -y install libev-4.15-1.el6.rf.x86_64.rpm

  组件:xtrabackup:C程序,支持innodb/Xtradb
	innobackupex :以perl脚本封装xtrabackup还支持myisam
   innobackupex的使用
	--host=主机名 
	--user=用户名
	--port=端口号
	--password=密码
	--databases=("库名","库1 库2","库.表")
	--no-timestamp=不用日期命名备份文件存储的子目录名
	
	innobackupex --user=root --password=2222 /allbak    
		#把所有数据备份,并且指定备份到/allbak 
工具恢复:
	准备恢复数据:
	innobackupex --user=root --password=2222 --apply-log /allbak
	清空数据库目录:rm -rf /var/lib/mysql/*
	innobackupex --user=root --password=2222 --copy-back /allbak
	    #把备份数据恢复过来
	chown -R mysql:mysql /var/lib/mysql   #把恢复过来的数据权限给mysql

innobackupex其他选项:
	--redo-only   #日志合并
	--apply-log    #准备还原
	--copy-back       #恢复数据
	--incremental 目录名      #增量备份
	--incremental-basedir=目录名      #增量备份时指定上一次备份的目录名
	--incremental-dir=目录名         #准备恢复数据时,指定增量备份的目录名
	--export                 #导出表信息
	import                   #导入表空间

    完全备份后,完全备份的目录下有xtrabackup_checkpoints文件,此文件内容有lns
	lsn就是备份信息
    增量备份时,系统读取上次备份的lsn信息,来实现增量备份
增量恢复:
	innobackupex --user=root --password=2222 --apply-log --redo-only /allbak
		#把完全备份的数据做一下准备还原
	innobackupex --user=root --password=2222 --apply-log --redo-only \
	-->/allbak --incremental-dir=/zeng1dir
		#把第一次增量备份的日志合并到完全备份
	innobackupex --user=root --password=2222 --apply-log --redo-only \
	-->/allbak --incremental-dir=/zeng2dir
		#把第二次增量备份的日志合并到完全备份
 
	rm -rf /var/lib/mysql/*    #清空数据库目录
	innobackupex --user=root --password=2222 --copy-back /allbak
            #把备份的数据恢复到数据库目录下
	chown -R mysq:mysql /var/lib/mysql
		#把恢复过来数据库目录加权限
单个表的恢复:
	innobackupex --user=root --password=2222 --database="gamedb" /allbak
		#完全备份gamedb的表
	drop table gamedb.t1;
		#删除gamedb上的t1表
	innobackupex --user=root --password=2222 --databases="gamedb" \
	--> --apply-log -export /allbak
		#导出备份目录下的表信息
	create table gamedb.t1(id int) #创建新表,数据类型和字段名要跟删除的一样
	alter table gamedb.t1 discard tablespace
		#删除表空间
	cp /allbak/gamedb/t1.{ibd,cfg,exp} /var/lib/mysql/gamedb
		#把导出的表文件拷贝到数据库目录
	chown-R mysql:mysql /var/lib/mysql/gamedb
		#把刚刚拷贝过来的文件加权限
	alter table gamedb.t1 import tablespace;
		#导入表空间
	rm -rf /var/lib/mysql/gamedb/t1.{cfg,exp}
		#删除多余文件
事务日志文件:
	ibdata1.meta       #未提交的数据库命令
	xtrabackup_logfile  #已经提交的数据库命令
	ibdata1         #未提交的数据库命令
	ib_logfile0      #已经提交的数据库命令
	ib_logfile1      #已经提交的数据库命令















































































































